class DBHelper{static get DATABASE_URL(){return`${this.SERVER_URL}/restaurants`}static get SERVER_URL(){return"http://localhost:1337"}static getDB(){this.restaurantDBPromise=idb.open("restaurants-db",1,function(upgradeDB){switch(upgradeDB.oldVersion){case 0:upgradeDB.createObjectStore("restaurants",{keyPath:"id"}).createIndex("id","id")}})}static status(response){return response.status>=200&&response.status<300?Promise.resolve(response):Promise.reject(new Error(`Request failed. Returned status of ${response.statusText}`))}static json(response){return response.json()}static fetchRestaurants(callback){fetch(DBHelper.DATABASE_URL).then(DBHelper.status).then(DBHelper.json).then(function(restaurants){DBHelper.restaurantDBPromise.then(function(db){if(db){var store=db.transaction("restaurants","readwrite").objectStore("restaurants");restaurants.forEach(function(restaurant){store.put(restaurant)})}}),callback(null,restaurants)}).catch(function(error){DBHelper.restaurantDBPromise.then(function(db){if(db)return db.transaction("restaurants").objectStore("restaurants").getAll().then(function(restaurants){callback(null,restaurants)})}).catch(function(){callback(error,null)})})}static fetchReviews(id,callback){fetch(`${DBHelper.SERVER_URL}/reviews/?restaurant_id=${id}`).then(DBHelper.status).then(DBHelper.json).then(function(reviews){DBHelper.restaurantDBPromise.then(function(db){if(db)return db.transaction("restaurants","readwrite").objectStore("restaurants").openCursor()}).then(function addReview(cursor){var restaurant=cursor.value;if(cursor&&restaurant.id===id)return reviews.forEach(function(review){restaurant.reviews||(restaurant.reviews=[]),restaurant.reviews.push(review),cursor.update(restaurant)}),cursor.continue().then(addReview)}),callback(null,reviews)}).catch(function(error){DBHelper.restaurantDBPromise.then(function(db){if(db)return db.transaction("restaurants","readwrite").objectStore("restaurants").openCursor()}).then(function addReview(cursor){var restaurant=cursor.value;if(cursor&&restaurant.id===id)return callback(null,restaurant.reviews),cursor.continue().then(addReview)}).catch(function(){callback(error,null)})})}static fetchRestaurantById(id,callback){id=parseInt(id);DBHelper.fetchRestaurants((error,restaurants)=>{if(error)callback(error,null);else{const restaurant=restaurants.find(r=>r.id==id);restaurant?DBHelper.fetchReviews(id,(error,reviews)=>{if(error)callback(error,null);else{const foundReviews=[];reviews.forEach(function(review){review.restaurant_id===parseInt(id)&&foundReviews.push(review)}),restaurant.reviews=foundReviews,callback(null,restaurant)}}):callback("Restaurant does not exist",null)}})}static fetchRestaurantByCuisine(cuisine,callback){DBHelper.fetchRestaurants((error,restaurants)=>{if(error)callback(error,null);else{const results=restaurants.filter(r=>r.cuisine_type==cuisine);callback(null,results)}})}static fetchRestaurantByNeighborhood(neighborhood,callback){DBHelper.fetchRestaurants((error,restaurants)=>{if(error)callback(error,null);else{const results=restaurants.filter(r=>r.neighborhood==neighborhood);callback(null,results)}})}static fetchRestaurantByCuisineAndNeighborhood(cuisine,neighborhood,callback){DBHelper.fetchRestaurants((error,restaurants)=>{if(error)callback(error,null);else{let results=restaurants;"all"!=cuisine&&(results=results.filter(r=>r.cuisine_type==cuisine)),"all"!=neighborhood&&(results=results.filter(r=>r.neighborhood==neighborhood)),callback(null,results)}})}static fetchNeighborhoods(callback){DBHelper.fetchRestaurants((error,restaurants)=>{if(error)callback(error,null);else{const neighborhoods=restaurants.map((v,i)=>restaurants[i].neighborhood),uniqueNeighborhoods=neighborhoods.filter((v,i)=>neighborhoods.indexOf(v)==i);callback(null,uniqueNeighborhoods)}})}static fetchCuisines(callback){DBHelper.fetchRestaurants((error,restaurants)=>{if(error)callback(error,null);else{const cuisines=restaurants.map((v,i)=>restaurants[i].cuisine_type),uniqueCuisines=cuisines.filter((v,i)=>cuisines.indexOf(v)==i);callback(null,uniqueCuisines)}})}static urlForRestaurant(restaurant){return`./restaurant.html?id=${restaurant.id}`}static imageUrlForRestaurant(restaurant){var fileName;return`/img/${"undefined"!==(fileName="object"==typeof restaurant?restaurant.photograph:restaurant)&&fileName?fileName+".webp":"No_image.svg"}`}static imageSrcSetAttrForRestaurant(restaurant){var fileName;return"undefined"!==(fileName="object"==typeof restaurant?restaurant.photograph:restaurant)&&fileName?`/img/${fileName}.webp 1x, /img/${fileName}@2x.webp 2x`:""}static mapMarkerForRestaurant(restaurant,map){return new google.maps.Marker({position:restaurant.latlng,title:restaurant.name,url:DBHelper.urlForRestaurant(restaurant),map,animation:google.maps.Animation.DROP})}}